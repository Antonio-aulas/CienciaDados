# -*- coding: utf-8 -*-
"""SECOMJr Pandas e Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jD_vAC4M6O219vk7D_aKAVY4JBQujMaG

#Exemplo 1 - Gráfico de linhas
"""





import pandas as pd
import matplotlib.pyplot as plt

# Criar DataFrame de exemplo
dados = {'Ano': [2010, 2012, 2014, 2016, 2018],
         'Receita': [500, 700, 1000, 900, 1200]}
df = pd.DataFrame(dados)

# Gráfico de Linha
plt.plot(df['Ano'], df['Receita'], marker='o')
plt.title('Receita ao longo dos Anos')
plt.xlabel('Ano')
plt.ylabel('Receita (em milhares)')
plt.show()

"""#Exemplo 2: Gráfico de Barras

"""

plt.bar(df['Ano'], df['Receita'], color='skyblue')
plt.title('Receita por Ano')
plt.xlabel('Ano')
plt.ylabel('Receita (em milhares)')
plt.show()

"""#Exemplo 3: Gráfico de Setores (Pie)

"""

# Gráfico de Setores (Pie)
plt.pie(df['Receita'], labels=df['Ano'], autopct='%1.1f%%', startangle=90)
plt.axis('equal')  # Assegura que o gráfico de setores seja circular
plt.title('Distribuição da Receita por Ano')
plt.show()

"""#Exemplo 4: Gráfico de Linha com Múltiplas Séries Temporais

"""

# Criar DataFrame de exemplo com múltiplas séries temporais
dados_multiseries = {'Ano': [2010, 2012, 2014, 2016, 2018],
                     'Receita_A': [500, 700, 1000, 900, 1200],
                     'Receita_B': [300, 400, 600, 800, 1000]}
df_multiseries = pd.DataFrame(dados_multiseries)

# Gráfico de Linha com Múltiplas Séries Temporais
plt.plot(df_multiseries['Ano'], df_multiseries[['Receita_A', 'Receita_B']], marker='o')
plt.legend(['Receita_A', 'Receita_B'])
plt.title('Receita ao longo dos Anos (Múltiplas Séries)')
plt.xlabel('Ano')
plt.ylabel('Receita (em milhares)')
plt.show()

"""#Exemplo 5: Gráfico de Barras Empilhadas

"""

# Gráfico de Barras Empilhadas
plt.bar(df_multiseries['Ano'], df_multiseries['Receita_A'], label='Receita_A', color='skyblue')
plt.bar(df_multiseries['Ano'], df_multiseries['Receita_B'], label='Receita_B', color='lightcoral', bottom=df_multiseries['Receita_A'])
plt.legend()
plt.title('Receita por Ano (Barras Empilhadas)')
plt.xlabel('Ano')
plt.ylabel('Receita (em milhares)')
plt.show()

"""#Trabalhando com mapas - Folium e GeoPy"""

import folium

# Coordenadas das capitais brasileiras
capitais_brasileiras = {
    'Brasília': (-15.7801, -47.9292),
    'São Paulo': (-23.5505, -46.6333),
    'Rio de Janeiro': (-22.9068, -43.1729),
    'Salvador': (-12.9714, -38.5014),
    'Belo Horizonte': (-19.9167, -43.9345)
}

# Criar um mapa centrado no Brasil
mapa = folium.Map(location=[-15.7801, -47.9292], zoom_start=4)

# Adicionar marcadores para as capitais
for capital, coordenadas in capitais_brasileiras.items():
    folium.Marker(location=coordenadas, popup=capital).add_to(mapa)

# Exibir o mapa
mapa.save('capitais_brasileiras_mapa.html')
mapa

"""#Distância e localização com GeoPY"""

import folium
from geopy.distance import geodesic

# Coordenadas das capitais brasileiras
capitais_brasileiras = {
    'Brasília': (-15.7801, -47.9292),
    'São Paulo': (-23.5505, -46.6333),
    'Rio de Janeiro': (-22.9068, -43.1729),
    'Salvador': (-12.9714, -38.5014),
    'Belo Horizonte': (-19.9167, -43.9345)
}
# Lista para armazenar os dados do DataFrame
dados_distancias = []
# Criar um mapa centrado no Brasil
mapa = folium.Map(location=[-15.7801, -47.9292], zoom_start=4)

# Adicionar linhas entre as capitais com a distância em km
for capital_origem, coords_origem in capitais_brasileiras.items():
    for capital_destino, coords_destino in capitais_brasileiras.items():
        if capital_origem != capital_destino:
            distancia = geodesic(coords_origem, coords_destino).kilometers
            linha = folium.PolyLine([coords_origem, coords_destino], color='blue', weight=1, opacity=0.5)
            texto_distancia = f'{capital_origem} - {capital_destino}: {distancia:.2f} km'
            folium.Popup(texto_distancia).add_to(linha)
            linha.add_to(mapa)
              # Adicionar dados ao DataFrame
            dados_distancias.append({
                'Origem': capital_origem,
                'Destino': capital_destino,
                'Distancia (km)': distancia
            })

# Adicionar marcadores para as capitais após as linhas, para que fiquem acima
for capital, coordenadas in capitais_brasileiras.items():
    folium.Marker(location=coordenadas, popup=capital).add_to(mapa)

# Exibir o mapa
mapa.save('capitais_brasileiras_mapa_com_distancias.html')
mapa

"""# Exibindo o dataframe criado no script anterior"""

df_distancias = pd.DataFrame(dados_distancias)
print(df_distancias)